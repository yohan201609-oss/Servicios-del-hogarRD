# Script de PowerShell para verificar la configuraci√≥n de Firebase
# Uso: .\scripts\verify_configuration.ps1

param(
    [switch]$SkipTests
)

# Configurar colores para output
$ErrorActionPreference = "Stop"

function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

Write-Host "üîç Verificando configuraci√≥n de Firebase..." -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Verificar que estemos en el directorio correcto
if (-not (Test-Path "pubspec.yaml")) {
    Write-Error "No se encontr√≥ pubspec.yaml. Aseg√∫rate de estar en el directorio ra√≠z del proyecto Flutter"
    exit 1
}

# Verificar que Flutter est√© instalado
try {
    $flutterVersion = flutter --version
    Write-Status "Flutter encontrado: $($flutterVersion.Split("`n")[0])"
} catch {
    Write-Error "Flutter no est√° instalado o no est√° en el PATH"
    exit 1
}

Write-Status "Verificando dependencias de Flutter..."
flutter pub get

if (-not $SkipTests) {
    Write-Status "Ejecutando an√°lisis de c√≥digo..."
    flutter analyze

    Write-Status "Ejecutando tests..."
    flutter test
}

Write-Host ""
Write-Host "üì± Verificando archivos de configuraci√≥n..." -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

# Verificar archivos de Android
Write-Status "Verificando archivos Android..."
$androidFiles = @(
    "android/app/src/dev/google-services.json",
    "android/app/src/staging/google-services.json",
    "android/app/src/prod/google-services.json"
)

foreach ($file in $androidFiles) {
    if (Test-Path $file) {
        Write-Success "‚úÖ $file existe"
    } else {
        Write-Error "‚ùå $file no encontrado"
    }
}

# Verificar archivos de iOS
Write-Status "Verificando archivos iOS..."
$iosFiles = @(
    "ios/Runner/GoogleService-Info-dev.plist",
    "ios/Runner/GoogleService-Info-staging.plist",
    "ios/Runner/GoogleService-Info-prod.plist",
    "ios/Runner/GoogleService-Info.plist"
)

foreach ($file in $iosFiles) {
    if (Test-Path $file) {
        Write-Success "‚úÖ $file existe"
    } else {
        Write-Error "‚ùå $file no encontrado"
    }
}

# Verificar archivos de configuraci√≥n Flutter
Write-Status "Verificando archivos de configuraci√≥n Flutter..."
$flutterFiles = @(
    "lib/firebase_options_dev.dart",
    "lib/firebase_options_staging.dart",
    "lib/firebase_options_prod.dart"
)

foreach ($file in $flutterFiles) {
    if (Test-Path $file) {
        Write-Success "‚úÖ $file existe"
    } else {
        Write-Error "‚ùå $file no encontrado"
    }
}

Write-Host ""
Write-Host "üîß Verificando configuraci√≥n de build flavors..." -ForegroundColor Cyan
Write-Host "==============================================" -ForegroundColor Cyan

# Verificar configuraci√≥n de Android
Write-Status "Verificando configuraci√≥n de Android..."
if (Test-Path "android/app/build.gradle.kts") {
    $content = Get-Content "android/app/build.gradle.kts" -Raw
    if ($content -match "productFlavors") {
        Write-Success "‚úÖ Build flavors configurados en Android"
    } else {
        Write-Error "‚ùå Build flavors no configurados en Android"
    }
} else {
    Write-Error "‚ùå android/app/build.gradle.kts no encontrado"
}

# Verificar configuraci√≥n de iOS
Write-Status "Verificando configuraci√≥n de iOS..."
if (Test-Path "ios/Runner.xcworkspace") {
    Write-Success "‚úÖ Workspace de iOS existe"
} else {
    Write-Error "‚ùå Workspace de iOS no encontrado"
}

Write-Host ""
Write-Host "üìä Resumen de verificaci√≥n:" -ForegroundColor Cyan
Write-Host "==========================" -ForegroundColor Cyan

# Contar archivos de configuraci√≥n
$androidConfigs = (Get-ChildItem "android/app/src" -Recurse -Name "google-services.json" -ErrorAction SilentlyContinue).Count
$iosConfigs = (Get-ChildItem "ios/Runner" -Name "GoogleService-Info*.plist" -ErrorAction SilentlyContinue).Count
$flutterConfigs = (Get-ChildItem "lib" -Name "firebase_options_*.dart" -ErrorAction SilentlyContinue).Count

Write-Status "Archivos de configuraci√≥n encontrados:"
Write-Status "  - Android: $androidConfigs/3"
Write-Status "  - iOS: $iosConfigs/4 (incluyendo el original)"
Write-Status "  - Flutter: $flutterConfigs/3"

if ($androidConfigs -eq 3 -and $iosConfigs -eq 4 -and $flutterConfigs -eq 3) {
    Write-Success "üéâ ¬°Toda la configuraci√≥n est√° completa!"
} else {
    Write-Warning "‚ö†Ô∏è Algunos archivos de configuraci√≥n faltan"
}

Write-Host ""
Write-Status "Para probar manualmente:"
Write-Status "  flutter run --flavor dev --dart-define=ENVIRONMENT=development"
Write-Status "  flutter run --flavor staging --dart-define=ENVIRONMENT=staging"
Write-Status "  flutter run --flavor prod --dart-define=ENVIRONMENT=production"

Write-Host ""
Write-Status "Para construir todas las versiones:"
Write-Status "  .\scripts\build_all.ps1"
Write-Status "  o en macOS/Linux: ./scripts/build_all.sh"

Write-Host ""
Write-Status "Opciones del script:"
Write-Status "  -SkipTests     : Saltar an√°lisis y tests"
